[{"title":"本地存储小练习（完善版）","url":"https://bobo-33.github.io/2017/08/02/本地存储小练习（完善版）/","content":"<p>接上一篇ajax小练习，这是一个完整哒~</p>\n<h1 id=\"整体技术应用\"><a href=\"#整体技术应用\" class=\"headerlink\" title=\"整体技术应用\"></a>整体技术应用</h1><ul>\n<li><p>ajax读取json文件</p>\n</li>\n<li><p>数组的push方法</p>\n</li>\n<li><p>localStorage的设置与读取</p>\n</li>\n<li><p>subString截取字符串</p>\n</li>\n</ul>\n<h1 id=\"新闻列表实现\"><a href=\"#新闻列表实现\" class=\"headerlink\" title=\"新闻列表实现\"></a>新闻列表实现</h1><h2 id=\"HTML代码\"><a href=\"#HTML代码\" class=\"headerlink\" title=\"HTML代码\"></a>HTML代码</h2><p><img src=\"/2017/08/02/本地存储小练习（完善版）/pre-1.png\" alt=\"新闻列表-HTML代码\"></p>\n<h2 id=\"javascript代码\"><a href=\"#javascript代码\" class=\"headerlink\" title=\"javascript代码\"></a>javascript代码</h2><p><img src=\"/2017/08/02/本地存储小练习（完善版）/pre2.png\" alt=\"新闻列表-javascript代码\"></p>\n<h2 id=\"json数据\"><a href=\"#json数据\" class=\"headerlink\" title=\"json数据\"></a>json数据</h2><p><img src=\"/2017/08/02/本地存储小练习（完善版）/pre3.png\" alt=\"新闻列表-json数据\"></p>\n<h2 id=\"界面展示\"><a href=\"#界面展示\" class=\"headerlink\" title=\"界面展示\"></a>界面展示</h2><p><img src=\"/2017/08/02/本地存储小练习（完善版）/pre4.png\" alt=\"新闻列表-界面展示\"></p>\n<h1 id=\"新闻列表实现-1\"><a href=\"#新闻列表实现-1\" class=\"headerlink\" title=\"新闻列表实现\"></a>新闻列表实现</h1><h2 id=\"HTML代码-1\"><a href=\"#HTML代码-1\" class=\"headerlink\" title=\"HTML代码\"></a>HTML代码</h2><p><img src=\"/2017/08/02/本地存储小练习（完善版）/index-1.png\" alt=\"新闻列表-HTML代码\"></p>\n<h2 id=\"javascript代码-1\"><a href=\"#javascript代码-1\" class=\"headerlink\" title=\"javascript代码\"></a>javascript代码</h2><p><img src=\"/2017/08/02/本地存储小练习（完善版）/index-2.png\" alt=\"新闻列表-javascript代码\"></p>\n<h2 id=\"json数据-1\"><a href=\"#json数据-1\" class=\"headerlink\" title=\"json数据\"></a>json数据</h2><p><img src=\"/2017/08/02/本地存储小练习（完善版）/index-3.png\" alt=\"新闻列表-json数据\"></p>\n<h2 id=\"界面展示-1\"><a href=\"#界面展示-1\" class=\"headerlink\" title=\"界面展示\"></a>界面展示</h2><p><img src=\"/2017/08/02/本地存储小练习（完善版）/index-4.png\" alt=\"新闻列表-j界面展示\"></p>\n","categories":[],"tags":["javascript"]},{"title":"本地存储小练习","url":"https://bobo-33.github.io/2017/08/01/本地存储小练习/","content":"<h1 id=\"首先说明一下要完成的功能\"><a href=\"#首先说明一下要完成的功能\" class=\"headerlink\" title=\"首先说明一下要完成的功能\"></a>首先说明一下要完成的功能</h1><h2 id=\"点击一条新闻标题跳转到相应新闻内容\"><a href=\"#点击一条新闻标题跳转到相应新闻内容\" class=\"headerlink\" title=\"点击一条新闻标题跳转到相应新闻内容\"></a>点击一条新闻标题跳转到相应新闻内容</h2><p><img src=\"/2017/08/01/本地存储小练习/pre-1.png\" alt=\"整体功能-1\"><br><img src=\"/2017/08/01/本地存储小练习/index-1.png\" alt=\"整体功能-2\"><br><img src=\"/2017/08/01/本地存储小练习/h.png\" alt=\"整体功能\"></p>\n<h2 id=\"新闻列表代码实现\"><a href=\"#新闻列表代码实现\" class=\"headerlink\" title=\"新闻列表代码实现\"></a>新闻列表代码实现</h2><p><img src=\"/2017/08/01/本地存储小练习/pre.png\" alt=\"新闻列表代码实现\"></p>\n<h2 id=\"新闻详情代码实现\"><a href=\"#新闻详情代码实现\" class=\"headerlink\" title=\"新闻详情代码实现\"></a>新闻详情代码实现</h2><p><img src=\"/2017/08/01/本地存储小练习/index.png\" alt=\"新闻详情代码实现\"></p>\n","categories":[],"tags":["javascript"]},{"title":"flex布局详解","url":"https://bobo-33.github.io/2017/07/31/flex布局详解/","content":"<h1 id=\"一张图看懂flex\"><a href=\"#一张图看懂flex\" class=\"headerlink\" title=\"一张图看懂flex\"></a>一张图看懂flex</h1><p><img src=\"/2017/07/31/flex布局详解/1.png\" alt=\"一张图看懂flex\"></p>\n","categories":[],"tags":["css"]},{"title":"css样式兼容性写法","url":"https://bobo-33.github.io/2017/07/31/css样式兼容性写法/","content":"<h1 id=\"display-flex\"><a href=\"#display-flex\" class=\"headerlink\" title=\"display:flex\"></a>display:flex</h1><pre><code>.flex{\n    display:-webkit-box;\n    display:-ms-flexbox;\n    display:flex;\n    }\n</code></pre><h1 id=\"flex-direction\"><a href=\"#flex-direction\" class=\"headerlink\" title=\"flex-direction\"></a>flex-direction</h1><ul>\n<li><p>水平</p>\n<pre><code>.flex-h{\n    -webkit-box-orient: horizontal;\n    -webkit-box-direction: normal;\n    -ms-flex-direction: row;\n    flex-direction: row;\n}\n</code></pre></li>\n</ul>\n<ul>\n<li><p>垂直</p>\n<pre><code>.flex-v{\n    -webkit-box-orient:vertical;\n    -webkit-box-direction:normal;\n    -ms-flex-direction:column;\n    flex-direction:column\n}\n</code></pre></li>\n</ul>\n<h1 id=\"垂直居中\"><a href=\"#垂直居中\" class=\"headerlink\" title=\"垂直居中\"></a>垂直居中</h1><pre><code>{\n    -webkit-box-align: center;\n    -ms-flex-align: center;\n    -ms-grid-row-align: center;\n        align-items: center;\n}\n</code></pre><h1 id=\"水平对齐方式\"><a href=\"#水平对齐方式\" class=\"headerlink\" title=\"水平对齐方式\"></a>水平对齐方式</h1><ul>\n<li><p>start</p>\n<pre><code>{\n    -webkit-box-pack: start;\n    -ms-flex-pack: start;\n    justify-content: flex-start\n}\n</code></pre></li>\n<li><p>center </p>\n<pre><code>{\n\n    -webkit-box-pack: center;\n   -ms-flex-pack: center;\n   justify-content: center\n}       \n</code></pre></li>\n<li><p>end    </p>\n<pre><code>{\n    -webkit-box-pack:end;\n    -ms-flex-pack:end;\n    justify-content:flex-end\n}\n</code></pre></li>\n<li><p>justify</p>\n<pre><code>{\n    -webkit-box-pack:justify;\n    -ms-flex-pack:justify;\n    justify-content:space-between\n}\n</code></pre></li>\n</ul>\n<h1 id=\"wrap\"><a href=\"#wrap\" class=\"headerlink\" title=\"wrap\"></a>wrap</h1><pre><code>{\n    -ms-flex-wrap:wrap;\n    flex-wrap:wrap;\n}\n</code></pre><h1 id=\"background-image\"><a href=\"#background-image\" class=\"headerlink\" title=\"background-image\"></a>background-image</h1><pre><code>{\n    background-image: -webkit-linear-gradient(#ddd, #ddd 50%, transparent 50%);\n    background-image: linear-gradient(#ddd, #ddd 50%, transparent 50%);\n}\n</code></pre>","categories":[],"tags":["css"]},{"title":"关于for循环的一个问题","url":"https://bobo-33.github.io/2017/07/24/关于for循环的一个问题/","content":"<h1 id=\"案例\"><a href=\"#案例\" class=\"headerlink\" title=\"案例\"></a>案例</h1><p>for(j=0,i=0;j&lt;6,i&lt;10;j++,i++) { k=i+j; } k 值最后是多少？</p>\n<pre><code>function test(){\n    var k=0;\n    for(var i=0,j=0;j&lt;6,i&lt;10;j++,i++){\n        k=i+j;\n    }\n    console.log(k);\n}\ntest();\n</code></pre><h1 id=\"剖析\"><a href=\"#剖析\" class=\"headerlink\" title=\"剖析\"></a>剖析</h1><ul>\n<li>答案是18，首先每次for循环的i和j值是相等的:</li>\n<li>第一次：j=0,i=0, 符合条件，k=j+i=0;</li>\n<li>第二次：j=1,i=1,符合条件，k=j+i=2;</li>\n<li>第三次：j=2,i=2,符合条件，k=j+i=4;</li>\n<li>第四次：j=3,i=3,符合条件，k=j+i=6；</li>\n<li>第五次：j=4,i=4,符合条件，k=j+i=8;</li>\n<li>第六次：j=5,i=5,符合条件，k=j+i=10;</li>\n<li>第七次：j=6,i=6,符合条件，k=j+i=12(这里需要注意，循环继续的判断依据以分号前的最后一项为准，即判断i&lt;10符不符合条件。</li>\n<li>第八次：j=7,i=7,符合条件，k=j+i=14;</li>\n<li>第九次：j=8,i=8,符合条件，k=j+i=16;</li>\n<li>第十次：j=9,i=9,符合条件，k=j+i=18;</li>\n<li>第十一次：j=10,i=10,不符合条件，循环结束。</li>\n<li>for循环共执行10次，k的最终值等于18。</li>\n</ul>\n","categories":[],"tags":["javascript"]},{"title":"论事件委托","url":"https://bobo-33.github.io/2017/07/12/论事件委托/","content":"<p>从前对js的各种方法迷迷糊糊，最近一直在潜心学习js,知道了学会事件委托事件真的能做太多事情啦~</p>\n<h1 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h1><p>什么是事件委托：通俗的讲，事件就是onclick，onmouseover，onmouseout，等就是事件，委托呢，就是让别人来做，这个事件本来是加在某些元素上的，然而你却加到别人身上来做，完成这个事件。<br>　　举个列子：有三个同事预计会在周一收到快递。为签收快递，有两种办法：一是三个人在公司门口等快递；二是委托给前台MM代为签收。现实当中，我们大都采用委托的方案（公司也不会容忍那么多员工站在门口就为了等快递）。前台MM收到快递后，她会判断收件人是谁，然后按照收件人的要求签收，甚至代为付款。这种方案还有一个优势，那就是即使公司里来了新员工（不管多少），前台MM也会在收到寄给新员工的快递后核实并代为签收。</p>\n<h1 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h1><p>利用冒泡的原理，把事件加到父级上，触发执行效果。</p>\n<h1 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h1><ol>\n<li><p>性能要好</p>\n</li>\n<li><p>针对新创建的元素，直接可以拥有事件</p>\n</li>\n</ol>\n<h1 id=\"事件源\"><a href=\"#事件源\" class=\"headerlink\" title=\"事件源\"></a>事件源</h1><p>跟this作用一样(他不用看指向问题，谁操作的就是谁),event对象下的</p>\n<p>以上概念性的东西相信大家都看过八百遍了，下面总结一下我发现的事件委托应用的场景（献给像我一样的js小白~）</p>\n<h1 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h1><ul>\n<li>侧边菜单栏（就是那种鼠标移上去显示子菜单的）</li>\n</ul>\n<p>css代码</p>\n<p><img src=\"/2017/07/12/论事件委托/css.png\" alt=\"css代码\"></p>\n<p>html代码</p>\n<p><img src=\"/2017/07/12/论事件委托/html.png\" alt=\"html代码\"></p>\n<p>javascript代码</p>\n<p><img src=\"/2017/07/12/论事件委托/js.png\" alt=\"js代码\"></p>\n<ul>\n<li>还有一种在主菜单里面的那种子菜单</li>\n</ul>\n<p>css代码</p>\n<p><img src=\"/2017/07/12/论事件委托/css1.png\" alt=\"css代码\"></p>\n<p>html代码</p>\n<p><img src=\"/2017/07/12/论事件委托/html1.png\" alt=\"html代码\"></p>\n<p>javascript代码</p>\n<p><img src=\"/2017/07/12/论事件委托/js1.png\" alt=\"js代码\"></p>\n<ul>\n<li>tab切换</li>\n</ul>\n<p>css代码</p>\n<p><img src=\"/2017/07/12/论事件委托/css2.png\" alt=\"css代码\"></p>\n<p>html代码</p>\n<p><img src=\"/2017/07/12/论事件委托/html2.png\" alt=\"html代码\"></p>\n<p>javascript代码</p>\n<p><img src=\"/2017/07/12/论事件委托/js2.png\" alt=\"js代码\"></p>\n<p>总结一下就是事件委托应用到切换那一类的效果比较简单啦</p>\n","categories":[],"tags":["javascript"]},{"title":"由一个简单的轮播图想到的","url":"https://bobo-33.github.io/2017/07/11/由一个简单的轮播图想到的/","content":"<h3 id=\"一个简单的轮播图小代码\"><a href=\"#一个简单的轮播图小代码\" class=\"headerlink\" title=\"一个简单的轮播图小代码\"></a>一个简单的轮播图小代码</h3><pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;meta charset=&quot;UTF-8&quot;&gt;\n        &lt;title&gt;&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;div id=&quot;lunbo&quot;&gt;\n            &lt;img  class=&quot;Img&quot;/&gt;\n        &lt;/div&gt;\n        &lt;script type=&quot;text/javascript&quot;&gt;\n            var oImg=document.getElementsByClassName(&apos;Img&apos;);\n            var arr=[&quot;../img/7.jpg&quot;,&quot;../img/pic_bulboff.gif&quot;,&quot;../img/pic_bulbon.gif&quot;];\n            var arr1=[];\n            function lunbo(){\n                arr.unshift(arr.pop());//right                \n                for( i=0;i&lt;oImg.length;i++){\n                    oImg[i].src=arr[i];\n                }    \n                setTimeout(lunbo,1000);\n            }\n            lunbo();\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p>博主研究了好半天，觉得有一个一直不明白的问题终于懂啦~那就是shift(),unshift(),pop(),push()</p>\n<h3 id=\"辨析数组方法——shift-unshift-pop-push\"><a href=\"#辨析数组方法——shift-unshift-pop-push\" class=\"headerlink\" title=\"辨析数组方法——shift(),unshift(),pop(),push()\"></a>辨析数组方法——shift(),unshift(),pop(),push()</h3><ul>\n<li><p>shift()—–shift弹出数组第一个元素，返回被弹出的元素值</p>\n</li>\n<li><p>unshift()——unshift 在数组第一个元素前插入元素</p>\n</li>\n<li><p>pop()—–pop函数删除数组末尾元素</p>\n</li>\n<li><p>push()—–push在数组末尾添加元素</p>\n</li>\n</ul>\n<p>在上个栗子中，每隔1000ms轮播图img的src值是arr.pop()的返回值，如此循环。</p>\n<h3 id=\"shift-方法\"><a href=\"#shift-方法\" class=\"headerlink\" title=\"shift()方法\"></a>shift()方法</h3><p> 小实例：</p>\n<pre><code>// 使用shift弹出数组第一个元素\n// 返回被弹出的元素值\nvar tmp = [&apos;a&apos;,&apos;b&apos;,&apos;c&apos;];\nvar val = tmp.shift();\nalert(val); // a\nalert(tmp); // b,c\n</code></pre><p>如果是一个空数组：</p>\n<pre><code>// 使用shift弹出数组第一个元素\n// 返回被弹出的元素值\nvar tmp = [];\nvar val = tmp.shift();\nalert(val); // undefined\nalert(tmp); // 空\n</code></pre><h3 id=\"unshift-方法\"><a href=\"#unshift-方法\" class=\"headerlink\" title=\"unshift()方法\"></a>unshift()方法</h3><pre><code>unshift // 在数组第一个元素前插入元素    \n// 使用unshift在数组第一个元素前插入元素\n// 返回数组长度\nvar tmp = [&apos;a&apos;,&apos;b&apos;];\nvar len = tmp.unshift(&apos;c&apos;);\nalert(len); // 3\nalert(tmp); // c,a,b\n</code></pre><p>也可以一次插入多个元素，顺序依次从左边排起</p>\n<pre><code>// 使用unshift在数组第一个元素前插入元素\n// 返回数组长度\nvar tmp = [&apos;a&apos;,&apos;b&apos;];\nvar len = tmp.unshift(&apos;c&apos;,&apos;d&apos;);\nalert(len); // 4\nalert(tmp); // c,d,a,b\n</code></pre><h3 id=\"push-方法\"><a href=\"#push-方法\" class=\"headerlink\" title=\"push()方法\"></a>push()方法</h3><p> 跟unshift相反，push在数组末尾添加元素，返回添加元素以后的数组长度</p>\n<pre><code>// 使用push在数组末尾添加多个元素\n// 返回数组最新长度\nvar tmp = [&apos;a&apos;,&apos;b&apos;,&apos;c&apos;];\nvar len = tmp.push(&apos;d&apos;);\nalert(len); // 4\nalert(tmp); // a,b,c,d\n</code></pre><p>也可以一次添加多个元素</p>\n<pre><code>// 使用push在数组末尾添加多个元素\n// 返回数组最新长度\nvar tmp = [&apos;a&apos;,&apos;b&apos;,&apos;c&apos;];\nvar len = tmp.push(&apos;d&apos;,&apos;e&apos;,&apos;f&apos;);\nalert(len); // 6\nalert(tmp); // a,b,c,d,e,f\n</code></pre><h3 id=\"pop-方法\"><a href=\"#pop-方法\" class=\"headerlink\" title=\"pop()方法\"></a>pop()方法</h3><p>跟shift相反，pop弹出的是数组末尾元素，返回被弹出的元素值</p>\n<pre><code>// 使用pop弹出数组末尾元素\n// 返回被弹出的元素值\nvar tmp = [&apos;a&apos;,&apos;b&apos;,&apos;c&apos;];\nvar val = tmp.pop();\nalert(val); // c\nalert(tmp); // a,b\n</code></pre><p>如果数组为空，返回undefined</p>\n<pre><code>// 使用pop弹出数组末尾元素\n// 返回被弹出的元素值\nvar tmp = [];\nvar val = tmp.pop();\nalert(val); // undefined\nalert(tmp); // 空\n</code></pre><h3 id=\"创建数组的方式\"><a href=\"#创建数组的方式\" class=\"headerlink\" title=\"创建数组的方式\"></a>创建数组的方式</h3><p>顺便再唠叨几句，关于创建数组的三种方式</p>\n<ul>\n<li><p>one</p>\n<pre><code>var cars=new Array();\ncars[0]=&quot;a&quot;;\ncars[1]=&quot;b&quot;;\ncars[2]=&quot;c&quot;;\n</code></pre></li>\n<li><p>two </p>\n<pre><code>var cars=new Array(&quot;a&quot;,&quot;b&quot;,&quot;c&quot;);\n</code></pre></li>\n<li><p>three</p>\n<pre><code>var cars=[&quot;a&quot;,&quot;b&quot;,&quot;c&quot;];\n</code></pre></li>\n</ul>\n","categories":[],"tags":["javascript"]},{"title":"css---垂直居中问题总结","url":"https://bobo-33.github.io/2017/07/04/css-垂直居中问题总结/","content":"<h1 id=\"css—垂直居中问题总结\"><a href=\"#css—垂直居中问题总结\" class=\"headerlink\" title=\"css—垂直居中问题总结\"></a>css—垂直居中问题总结</h1><h3 id=\"方法一（定位）\"><a href=\"#方法一（定位）\" class=\"headerlink\" title=\"方法一（定位）\"></a>方法一（定位）</h3><pre><code>.outer{/*父元素*/\n    width: 500px;\n    height: 500px;\n    border: 1px solid #000;\n    position: relative;\n}\n.inner{/*子元素*/\n    width: 150px;\n    height: 100px;\n    position: absolute;\n    border: 1px solid #000;\n    top: 50%;\n    margin-top: -50px;/*子元素高的1/2*/\n    left: 50%;\n    margin-left: -75px;/*子元素宽的1/2*/\n}\n</code></pre><h3 id=\"方法二（flex布局）\"><a href=\"#方法二（flex布局）\" class=\"headerlink\" title=\"方法二（flex布局）\"></a>方法二（flex布局）</h3><pre><code>.outer{\n    width: 500px;\n    height: 500px;\n    border: 1px solid #000;\n    display: flex;\n    justify-content: center;/*水平居中*/\n}\n.inner{                \n    width: 200px;\n    height: 200px;\n    border: 1px solid #000;\n    align-self: center;/*垂直居中*/\n}\n</code></pre><h3 id=\"方法三（table布局）\"><a href=\"#方法三（table布局）\" class=\"headerlink\" title=\"方法三（table布局）\"></a>方法三（table布局）</h3><pre><code>.outer{\n    display: table-cell;\n    text-align: center;\n    vertical-align: middle;\n    width: 500px;\n    height: 500px;\n    border: 1px solid #000;\n\n}\n.inner{                \n    width: 200px;\n    height: 200px;\n    border: 1px solid #000;\n    display: inline-block;\n}\n</code></pre>","categories":[],"tags":["css"]},{"title":"简单的时间轴","url":"https://bobo-33.github.io/2017/07/04/简单的时间轴/","content":"<h2 id=\"style\"><a href=\"#style\" class=\"headerlink\" title=\"style\"></a>style</h2><pre><code>*{\n    margin: 0;\n    padding: 0;\n}\nul{list-style: none;}\na{text-decoration: none;color: #333;}\na:hover{color: purple;}\nul{\n    width: 500px;\n    margin: 20px auto;\n}\n.wraper{width: 800px;margin: auto;}\n.timeline li{                \n    border-left: 1px solid #ebebeb;\n    position: relative;\n    height: 100px;\n}\n.timeline span{\n    position: absolute;\n    width: 10px;\n    height: 10px;\n    border-radius: 999px;\n    background: purple;\n    left: -6px;\n    top: -10px;\n}\n.timeline div{\n    position: absolute;\n    top: -14px;\n    width: 200px;\n}\n.timeline li:nth-child(odd) div{\n    left: 20px;\n}\n.timeline li:nth-child(even) div{\n    left: -220px;\n    text-align: right;\n}\n.timeline li:nth-child(even) div p{\n    text-align: right;\n}\n.timeline p{\n    font-size: 12px;\n    color: #ccc;\n}\n.timeline a{\n    font-size: 14px;\n    line-height: 30px;\n}\n</code></pre><h2 id=\"html\"><a href=\"#html\" class=\"headerlink\" title=\"html\"></a>html</h2><pre><code>&lt;div class=&quot;wraper&quot;&gt;\n    &lt;h3&gt;时间轴&lt;/h3&gt;\n    &lt;div&gt;\n        &lt;textarea name=&quot;&quot; rows=&quot;&quot; cols=&quot;&quot; placeholder=&quot;请输入文字&quot;&gt;&lt;/textarea&gt;\n        &lt;input type=&quot;button&quot; value=&quot;记录&quot; id=&quot;btn&quot;/&gt;\n        &lt;p id=&quot;tip&quot;&gt;&lt;/p&gt;\n    &lt;/div&gt;\n    &lt;ul class=&quot;timeline&quot;&gt;&lt;/ul&gt;\n&lt;/div&gt;\n</code></pre><h2 id=\"javascript\"><a href=\"#javascript\" class=\"headerlink\" title=\"javascript\"></a>javascript</h2><pre><code>$(function(){\n    var Y,M,D,H;\n    function show(){\n        var mydate = new Date();\n        Y = mydate.getFullYear()+&quot;-&quot;;\n        M = (mydate.getMonth()+1)+&quot;-&quot;;\n        D = mydate.getDate();\n        H=mydate.toLocaleTimeString();\n\n    }\n    show();\n    //prepend()---在文档的开头插入内容\n    $(&quot;#btn&quot;).click(function(){\n          if($(&apos;textarea&apos;).val()!=&quot;&quot;){\n              $(&quot;.timeline&quot;).prepend(&quot;&lt;li&gt;&lt;span&gt;&lt;/span&gt;&lt;div&gt;&lt;p&gt;&quot;+Y+M+D+&quot;&lt;/p&gt;&lt;a href=&apos;&apos;&gt;&quot;+$(&apos;textarea&apos;).val()+&quot;&lt;/a&gt;&lt;/div&gt;&lt;/li&gt;&quot;)\n          }else{\n              alert(&quot;请输入文字&quot;)\n          }\n\n    });\n})\n</code></pre><h2 id=\"效果预览\"><a href=\"#效果预览\" class=\"headerlink\" title=\"效果预览\"></a>效果预览</h2><p><img src=\"/2017/07/04/简单的时间轴/1.png\" alt=\"演示1\"></p>\n","categories":[],"tags":["demo"]},{"title":"关于Hbuilder","url":"https://bobo-33.github.io/2017/07/04/关于Hbuilder/","content":"<h2 id=\"利用HBuilder设置外部web服务器来测试移动web\"><a href=\"#利用HBuilder设置外部web服务器来测试移动web\" class=\"headerlink\" title=\"利用HBuilder设置外部web服务器来测试移动web\"></a>利用HBuilder设置外部web服务器来测试移动web</h2><p>通常我们开发移动web都可以直接通过在chrome浏览器中，模拟相关移动设备来测试页面效果，但为了更加接近真实机测试效果，我们也可以部署服务器来使用真实机访问页面测试。本篇讲解如何使用HBuilder快速设置一个外部web服务器，然后可以直接使用真实机去扫描HBuilder中的二维码来访问测试页面。</p>\n<h2 id=\"打开HBuilder开发工具\"><a href=\"#打开HBuilder开发工具\" class=\"headerlink\" title=\"打开HBuilder开发工具\"></a>打开HBuilder开发工具</h2><p>1）在工具的右上角可以更改开发视图模式选择“边改边看模式”</p>\n<p>2）HBuilder将会展开一个自带的Web浏览器，可以点击一个齿轮按钮旁的倒三角展开列表</p>\n<p>3）选择列表最下面“设置web服务器”<br><img src=\"/2017/07/04/关于Hbuilder/1.png\" alt=\"演示1\"></p>\n<h2 id=\"在“设置web服务器界面”中\"><a href=\"#在“设置web服务器界面”中\" class=\"headerlink\" title=\"在“设置web服务器界面”中\"></a>在“设置web服务器界面”中</h2><p>1）依次展开左边栏的列表“HBuilder”——&gt;“Web服务器”——&gt;选择“外置Web服务器”</p>\n<p>2）然后在右边栏点击“新建”编辑Web服务器配置<br><img src=\"/2017/07/04/关于Hbuilder/2.png\" alt=\"演示1\"><br>3）编辑Web服务器配置界面，“名称”可以随意改，关键是“浏览器运行URL”应该填写你的本机ip地址<br><img src=\"/2017/07/04/关于Hbuilder/3.png\" alt=\"演示1\"></p>\n<h2 id=\"查看本机的ip地址并填写到“浏览器运行URL”\"><a href=\"#查看本机的ip地址并填写到“浏览器运行URL”\" class=\"headerlink\" title=\"查看本机的ip地址并填写到“浏览器运行URL”\"></a>查看本机的ip地址并填写到“浏览器运行URL”</h2><p>1）Windows打开控制面板的“网络和共享中心”去查看本机ip地址，Mac系统查看ip地址参考（<a href=\"http://jingyan.baidu.com/arti...）\" target=\"_blank\" rel=\"external\">http://jingyan.baidu.com/arti...）</a></p>\n<p>2）例如：小编的地址是192.168.0.122<br><img src=\"/2017/07/04/关于Hbuilder/4.png\" alt=\"演示1\"><br>3）填写到Web服务器配置中的“浏览器运行URL”，特别提醒注意填写的ip地址后加上HBuilder使用的端口号8020<br><img src=\"/2017/07/04/关于Hbuilder/5.png\" alt=\"演示1\"><br>4）然后点击确定，配置好一个web服务器<br><img src=\"/2017/07/04/关于Hbuilder/6.png\" alt=\"演示1\">（配置完毕）<br>5）选择使用刚刚新建的myWeb外部服务器<br><img src=\"/2017/07/04/关于Hbuilder/7.png\" alt=\"演示1\"><br>（选择myWeb）</p>\n<h2 id=\"扫码测试\"><a href=\"#扫码测试\" class=\"headerlink\" title=\"扫码测试\"></a>扫码测试</h2><p>1）使用HBuilder打开项目的HTML文件</p>\n<p>2）点击“Web服务器”中有个二维码的按钮，展开大图的二维码，可以直接使用真实机来扫码测试</p>\n<p>3）注意扫码测试，你的真实机和电脑需要在同一个局域网下<br><img src=\"/2017/07/04/关于Hbuilder/8.png\" alt=\"演示1\"><br>（使用手机扫二维码）</p>\n","categories":[],"tags":["编译器"]},{"title":"hexo插入图片方法","url":"https://bobo-33.github.io/2017/06/17/hexo插入图片/","content":"<h2 id=\"First\"><a href=\"#First\" class=\"headerlink\" title=\"First\"></a>First</h2><ul>\n<li><p>把主页配置文件_config.yml 里的post_asset_folder:这个选项设置为true</p>\n</li>\n<li><p>在你的hexo目录下执行这样一句话npm install hexo-asset-image –save，这是下载安装一个可以上传本地图片的插件，来自dalao：dalao的git</p>\n</li>\n<li><p>等待一小段时间后，再运行hexo n “xxxx”来生成md博文时，/source/_posts文件夹内除了xxxx.md文件还有一个同名的文件夹</p>\n</li>\n</ul>\n<h2 id=\"Second\"><a href=\"#Second\" class=\"headerlink\" title=\"Second\"></a>Second</h2><ul>\n<li><p>最后在xxxx.md中想引入图片时，先把图片复制到xxxx这个文件夹中，然后只需要在xxxx.md中按照markdown的格式引入图片：</p>\n<pre><code>![你想输入的替代文字](xxxx/图片名.jpg)\n</code></pre></li>\n</ul>\n<p><strong>注意：</strong>xxxx是这个md文件的名字，也是同名文件夹的名字，你想引入的图片就只需要放入xxxx这个文件夹内就好了，很像引用相对路径。</p>\n<ul>\n<li>最后检查一下，hexo g生成页面后，进入public\\2017\\02\\26\\index.html文件中查看相关字段，可以发现，html标签内的语句是<code>&lt;img src=&quot;2017/02/26/xxxx/图片名.jpg&quot;&gt;</code>，而不是<code>&lt;img src=&quot;xxxx/图片名.jpg&gt;</code>。这很重要，关乎你的网页是否可以真正加载你想插入的图片。</li>\n</ul>\n","categories":[],"tags":["other"]},{"title":"sass---总结2","url":"https://bobo-33.github.io/2017/06/17/sass-总结2/","content":"<h1 id=\"Sass运算\"><a href=\"#Sass运算\" class=\"headerlink\" title=\"Sass运算\"></a>Sass运算</h1><h2 id=\"加法运算\"><a href=\"#加法运算\" class=\"headerlink\" title=\"加法运算\"></a>加法运算</h2><ul>\n<li><p>变量或属性中都可以运算</p>\n</li>\n<li><p>不同类型单位报错（如ex,em,rem—-相对单位）</p>\n<pre><code>.width{            \n    20px+2em;\n}\n</code></pre></li>\n</ul>\n<h2 id=\"减法运算\"><a href=\"#减法运算\" class=\"headerlink\" title=\"减法运算\"></a>减法运算</h2><ul>\n<li>法则同上</li>\n</ul>\n<h2 id=\"乘法运算\"><a href=\"#乘法运算\" class=\"headerlink\" title=\"乘法运算\"></a>乘法运算</h2><ul>\n<li><p>支持多种单位</p>\n</li>\n<li><p>一个单位有多种值报错</p>\n<pre><code>.width{        \n    20px*10px;    \n    }\n</code></pre></li>\n<li><p>同一个单位写一个值</p>\n<pre><code>.width{\n    20px*10;\n}\n</code></pre></li>\n</ul>\n<ul>\n<li><p>不同类型单位报错</p>\n<pre><code>.width{\n    20px*2em;\n}\n</code></pre></li>\n</ul>\n<h2 id=\"除法运算\"><a href=\"#除法运算\" class=\"headerlink\" title=\"除法运算\"></a>除法运算</h2><ul>\n<li><p>法则同乘法</p>\n</li>\n<li><p>单独使用“/”将不会生效，应该加上“（）”</p>\n<pre><code>.width{\n    (960px / 10);\n}\n</code></pre></li>\n<li><p>当除法是数学表达式中的一部分，不加“（）”也会生效</p>\n<pre><code>.width{\n    960px / 10+10;\n}\n</code></pre></li>\n</ul>\n<h2 id=\"变量计算\"><a href=\"#变量计算\" class=\"headerlink\" title=\"变量计算\"></a>变量计算</h2><p>计算列宽：</p>\n<pre><code>$col-width: 60px;\n$col-gap: 20px;\n\n@for $i from 1 through 12 {\n    .col-#{$i}{\n        width:$col-width*$i+$col-gap*($i-1);\n    }\n}\n</code></pre><h2 id=\"数字计算\"><a href=\"#数字计算\" class=\"headerlink\" title=\"数字计算\"></a>数字计算</h2><ul>\n<li><p>数字运算包括前面介绍的：加法、减法、乘法和除法等运算。而且还可以通过括号来修改他们的运算先后顺序。</p>\n<pre><code>.box {\n  width: ((220px + 720px) - 11 * 20 ) / 12 ;  \n}\n</code></pre></li>\n</ul>\n<h2 id=\"颜色计算\"><a href=\"#颜色计算\" class=\"headerlink\" title=\"颜色计算\"></a>颜色计算</h2><pre><code>p {\n  color: #010203 + #040506;\n}\n</code></pre><h2 id=\"字符运算\"><a href=\"#字符运算\" class=\"headerlink\" title=\"字符运算\"></a>字符运算</h2><p>通过“+”链接</p>\n<pre><code>$content: &quot;Hello&quot; + &quot;&quot; + &quot;Sass!&quot;;\n    .box:before {\n      content: &quot; #{$content} &quot;;\n    }\n</code></pre>","categories":["programming"],"tags":["programming"]},{"title":"sass---总结","url":"https://bobo-33.github.io/2017/06/17/sass-总结/","content":"<h2 id=\"css预处理器简介\"><a href=\"#css预处理器简介\" class=\"headerlink\" title=\"css预处理器简介\"></a>css预处理器简介</h2><ul>\n<li><p>css预处理器为css增加编程特性，无需考虑浏览器兼容性。</p>\n</li>\n<li><p>css预处理器语言更加简洁，可读性强，适应性强，易于维护。</p>\n</li>\n</ul>\n<h2 id=\"sass特点（只能使用sass老语法规则）\"><a href=\"#sass特点（只能使用sass老语法规则）\" class=\"headerlink\" title=\"sass特点（只能使用sass老语法规则）\"></a>sass特点（只能使用sass老语法规则）</h2><ul>\n<li><p>用更简洁的语法清晰，结构化描述样式。</p>\n</li>\n<li><p>用ruby语言</p>\n</li>\n<li><p>缩进式语法</p>\n</li>\n<li><p>不带{}和；</p>\n</li>\n</ul>\n<h2 id=\"scss语法与普通css一致（使用了sass新语法规则）\"><a href=\"#scss语法与普通css一致（使用了sass新语法规则）\" class=\"headerlink\" title=\"scss语法与普通css一致（使用了sass新语法规则）\"></a>scss语法与普通css一致（使用了sass新语法规则）</h2><h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><ul>\n<li><p>安装ruby （ruby -v—安装成功）</p>\n</li>\n<li><p>安装sass  （gem install sass，升级sass版本gem update sass，查看sass版本sass -v）</p>\n</li>\n</ul>\n<h2 id=\"引用sass\"><a href=\"#引用sass\" class=\"headerlink\" title=\"引用sass\"></a>引用sass</h2><ul>\n<li><p>先写sass文件</p>\n</li>\n<li><p>命令行编译：sass –watch &lt;要编译的Sass文件路径&gt;/style.scss:&lt;要输出CSS文件路径&gt;/style.css</p>\n</li>\n<li><p>用watch本地文件一旦发生变化，css就会改变</p>\n</li>\n</ul>\n<h2 id=\"sass不同样式风格输出\"><a href=\"#sass不同样式风格输出\" class=\"headerlink\" title=\"sass不同样式风格输出\"></a>sass不同样式风格输出</h2><ul>\n<li><p>嵌套输出方式 nested</p>\n</li>\n<li><p>展开输出方式 expanded  </p>\n</li>\n<li><p>紧凑输出方式 compact </p>\n</li>\n<li><p>压缩输出方式 compressed</p>\n</li>\n</ul>\n<h2 id=\"sass声明变量\"><a href=\"#sass声明变量\" class=\"headerlink\" title=\"sass声明变量\"></a>sass声明变量</h2><ul>\n<li>组成：（1）声明变量符$;（2）变量名称；（3）变量值</li>\n</ul>\n<p>如：</p>\n<pre><code>$color: red;\n</code></pre><h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><ol>\n<li><p>！default—默认声明</p>\n</li>\n<li><p>嵌套</p>\n<p> 选择器嵌套：</p>\n<pre><code>nav {\n  a {\n    color: red;\n\n    header &amp; {\n      color:green;\n    }\n  }  \n}\n</code></pre><p> 属性嵌套</p>\n<pre><code>.box {\n  border: {\n   top: 1px solid red;\n   bottom: 1px solid green;\n  }\n}\n</code></pre><p> 伪类嵌套</p>\n<pre><code>.box{\n  &amp;:before {\n    content:&quot;伪元素嵌套&quot;;\n  }\n}\n</code></pre></li>\n</ol>\n<h2 id=\"混合宏\"><a href=\"#混合宏\" class=\"headerlink\" title=\"混合宏\"></a>混合宏</h2><ul>\n<li><p>声明：</p>\n<pre><code>@mixin border-radius{\n    -webkit-border-radius: 3px;\n    border-radius: 3px;\n}\n</code></pre></li>\n<li><p>调用：</p>\n<pre><code>button {\n    @include border-radius;\n}\n</code></pre></li>\n<li><p>混合宏变量（不带值）</p>\n<pre><code>@mixin border-radius($radius){\n  -webkit-border-radius: $radius;\n  border-radius: $radius;\n}\n\n.box {\n  @include border-radius(3px);\n}\n</code></pre></li>\n<li><p>混合宏变量（带值）</p>\n<pre><code>@mixin border-radius($radius:3px){\n  -webkit-border-radius: $radius;\n  border-radius: $radius;\n}\n\n.box {\n  @include border-radius;\n}\n</code></pre></li>\n<li><p>混合宏多个参数（不带值）</p>\n<pre><code>@mixin size($width,$height){\n  width: $width;\n  height: $height;\n}\n\n.box-center {\n  @include size(500px,300px);\n}\n</code></pre></li>\n<li><p>混合宏的缺点</p>\n</li>\n</ul>\n<p>容易产生冗余代码</p>\n<ul>\n<li><p>继承</p>\n<pre><code>.btn {\n  border: 1px solid #ccc;\n  padding: 6px 10px;\n  font-size: 14px;\n}\n\n.btn-primary {\n  background-color: #f36;\n  color: #fff;\n  @extend .btn;\n}\n</code></pre></li>\n<li><p>占位符—%（当不调用时不显示不产生冗余代码）</p>\n<pre><code>%mt5 {\n  margin-top: 5px;\n}\n\n.btn {\n  @extend %mt5;\n}\n</code></pre></li>\n<li><p>数据类型</p>\n<pre><code>1. 数字: 如，1、 2、 13、 10px；\n\n2. 字符串：有引号字符串或无引号字符串，如，&quot;foo&quot;、 &apos;bar&apos;、 baz；\n\n3. 颜色：如，blue、 #04a3f9、 rgba(255,0,0,0.5)；\n\n4. 布尔型：如，true、 false；\n\n5. 空值：如，null；\n\n6. 值列表：用空格或者逗号分开，如，1.5em 1em 0 2em 、 Helvetica, Arial, sans-serif。\n</code></pre></li>\n</ul>\n","categories":["programming"],"tags":["programming"]},{"title":":before和:after用法总结","url":"https://bobo-33.github.io/2017/06/15/before和-after用法总结/","content":"<h1 id=\"伪类和伪元素\"><a href=\"#伪类和伪元素\" class=\"headerlink\" title=\"伪类和伪元素\"></a>伪类和伪元素</h1><ul>\n<li><p>伪类：向某选择器添加特殊效果</p>\n</li>\n<li><p>伪元素：将特殊效果添加到某选择器</p>\n<pre><code>span:hover//伪类\nspan::before//伪元素\n</code></pre></li>\n</ul>\n<p><em>为了兼容性，将伪类和伪元素都写成单冒号</em></p>\n<h1 id=\"常见的伪类和伪元素\"><a href=\"#常见的伪类和伪元素\" class=\"headerlink\" title=\"常见的伪类和伪元素\"></a>常见的伪类和伪元素</h1><ul>\n<li><p>伪类</p>\n<ol>\n<li><p>:link</p>\n</li>\n<li><p>:visited</p>\n</li>\n<li><p>:hover</p>\n</li>\n<li><p>:active</p>\n</li>\n<li><p>:target</p>\n</li>\n<li><p>:not(s)</p>\n</li>\n<li><p>:focus</p>\n</li>\n</ol>\n</li>\n<li><p>伪元素</p>\n<ol>\n<li><p>:before</p>\n</li>\n<li><p>:after</p>\n</li>\n<li><p>:first-letter</p>\n</li>\n<li><p>:first-line</p>\n</li>\n<li><p>:selection</p>\n</li>\n</ol>\n</li>\n</ul>\n<h1 id=\"伪元素的兼容性\"><a href=\"#伪元素的兼容性\" class=\"headerlink\" title=\"伪元素的兼容性\"></a>伪元素的兼容性</h1><ul>\n<li>Chrome 2+,</li>\n<li>Firefox 3.5+ (3.0 had partial support),</li>\n<li>Safari 1.3+,</li>\n<li>Opera 9.2+,</li>\n<li>IE8+ (with some minor bugs),</li>\n<li>几乎所有的移动浏览器。</li>\n</ul>\n<h1 id=\"伪元素-before和-after定义\"><a href=\"#伪元素-before和-after定义\" class=\"headerlink\" title=\"伪元素:before和:after定义\"></a>伪元素:before和:after定义</h1><ul>\n<li><p>：after—-在备选元素后面加入内容</p>\n</li>\n<li><p>：before—-在备选元素前面加入内容</p>\n</li>\n</ul>\n<h1 id=\"伪元素-before和-after——-content几个属性用法\"><a href=\"#伪元素-before和-after——-content几个属性用法\" class=\"headerlink\" title=\"伪元素:before和:after——-content几个属性用法\"></a>伪元素:before和:after——-content几个属性用法</h1><ul>\n<li><p>添加字符串</p>\n<pre><code>a:before{\n    content:&quot;文字&quot;\n}\n</code></pre></li>\n<li><p>添加href属性</p>\n<pre><code>a:before{\n    content: &quot;(&quot;attr(href)&quot;)&quot;\n}\n</code></pre></li>\n</ul>\n<ul>\n<li><p>引用媒体文件</p>\n<pre><code>a:before{\n    content:url(bg.jpg);\n}\n</code></pre></li>\n<li><p>自定义</p>\n<pre><code>a:before{\n    content:attr(data-title);\n}\n</code></pre></li>\n</ul>\n<p>参考资料：<a href=\"http://segmentfault.com/a/1190000000484493\" target=\"_blank\" rel=\"external\">http://segmentfault.com/a/1190000000484493</a></p>\n<p><a href=\"http://www.w3cplus.com/css3/pseudo-element-roundup.html\" target=\"_blank\" rel=\"external\">http://www.w3cplus.com/css3/pseudo-element-roundup.html</a></p>\n<p>本文系转载，原文地址：<a href=\"http://www.cnblogs.com/cheerful-queen/p/4971484.html\" target=\"_blank\" rel=\"external\">:after和:before炫酷用法总结</a></p>\n","categories":["programming"],"tags":["programming"]},{"title":"Vue.js-----总结","url":"https://bobo-33.github.io/2017/06/13/Vue-js-总结/","content":"<h1 id=\"Vue-js—–总结\"><a href=\"#Vue-js—–总结\" class=\"headerlink\" title=\"Vue.js—–总结\"></a>Vue.js—–总结</h1><h2 id=\"vue-js特点\"><a href=\"#vue-js特点\" class=\"headerlink\" title=\"vue.js特点\"></a>vue.js特点</h2><ul>\n<li><p>结合了react和angular的优点—–react：组件化，angular：灵活指令和页面操作方法</p>\n</li>\n<li><p>基于MVVM模式的数据双向绑定</p>\n</li>\n<li><p>IE8及IE8以下不兼容</p>\n</li>\n</ul>\n<h2 id=\"vue-js–组件\"><a href=\"#vue-js–组件\" class=\"headerlink\" title=\"vue.js–组件\"></a>vue.js–组件</h2><ul>\n<li><p>html</p>\n<pre><code>&lt;template&gt;&lt;/template&gt;\n</code></pre></li>\n<li><p>css</p>\n<pre><code>&lt;style&gt;&lt;/style&gt;\n</code></pre></li>\n<li><p>javascript</p>\n<pre><code>&lt;script&gt;&lt;/script&gt;\n</code></pre></li>\n</ul>\n<h2 id=\"vue重要选项\"><a href=\"#vue重要选项\" class=\"headerlink\" title=\"vue重要选项\"></a>vue重要选项</h2><ul>\n<li><p>data</p>\n</li>\n<li><p>methods</p>\n</li>\n<li><p>watch(监听)</p>\n</li>\n</ul>\n<h2 id=\"vue对象里通过指令进行html关联\"><a href=\"#vue对象里通过指令进行html关联\" class=\"headerlink\" title=\"vue对象里通过指令进行html关联\"></a>vue对象里通过指令进行html关联</h2><p>###数据渲染</p>\n<ul>\n<li><p>v-text</p>\n</li>\n<li><p>v-html</p>\n</li>\n</ul>\n<p>###控制模块隐藏</p>\n<ul>\n<li><p>v-if</p>\n</li>\n<li><p>v-show</p>\n</li>\n</ul>\n<p><strong>区别：v-if是直接渲染DOM元素，v-show是通过css控制</strong></p>\n<p>###循环列表</p>\n<ul>\n<li>v-for</li>\n</ul>\n<p>###事件绑定</p>\n<ul>\n<li>v-on:事件</li>\n</ul>\n<p>如：</p>\n<pre><code>&lt;button v-on:click=&quot;dothis&quot;&gt;&lt;/button&gt;\n</code></pre><p>可简化为：</p>\n<pre><code>&lt;button @click=&quot;dothis&quot;&gt;&lt;/button&gt;\n</code></pre><p>script:</p>\n<pre><code>new Vue({\n    methods:{\n        dothis:function( something ){\n\n        }\n    }\n})\n</code></pre>","categories":["programming"],"tags":["programming"]},{"title":"angular.js总结---1","url":"https://bobo-33.github.io/2017/06/07/angular-js总结-1/","content":"<p>#angular.js-1</p>\n<ul>\n<li>angular核心：MVC、模块化、自动化双向数据绑定、语义化标签、依赖注入</li>\n<li>angular缺点：不利于SEO，内容都是动态获取并渲染生成的，搜索引擎没法爬取。</li>\n<li><p>基本命令：</p>\n<pre><code>1.  ng-app:定义一个应用程序\n\n2.  ng-modal:把数据绑定到应用程序\n\n3.  ng-bind:把应用程序数据绑定到HTML视图\n\n4.  表达式{{}}\n\n5.  重复元素--ng-repeat\n\n6.  作用域$scope,$rootScope\n\n7.  过滤器---“|”管道字符\n\n8.  服务---$timeout,$interval\n\n9.  $http(远程服务)\n\n10. select选择框\n\n11. 表格\n\n12. ng-disabled(true/false)\n\n13. ng-show(true/false)\n\n14. html事件：ng-click\n\n15. 包含文件:ng-include\n\n16. 动画：ngAnimate\n</code></pre></li>\n</ul>\n","categories":["programming"],"tags":["programming"]},{"title":"移动端开发标准总结---2","url":"https://bobo-33.github.io/2017/06/07/移动端开发标准总结-2/","content":"<ul>\n<li>Meta标签<br> a.&lt;meta content=”yes” name=” apple-mobile-web-app-capable” /&gt; ———-允许全屏浏览</li>\n<li>请保证每条数据放在a标签中</li>\n<li><p>边框</p>\n<pre><code>a-----原理：伪类+transform+绝对定位\n\n.scale-1px{\n        position: relative;\n        margin-bottom: 20px;\n        border:none;\n    }\n    .scale-1px:after{\n        content: &apos;&apos;;\n        position: absolute;\n        top: 0;\n        left: 0;\n        border: 1px solid #000;\n        -webkit-box-sizing: border-box;\n        box-sizing: border-box;\n        width: 200%;\n        height: 200%;\n        -webkit-transform: scale(0.5);\n        transform: scale(0.5);\n        -webkit-transform-origin: left top;\n        transform-origin: left top;\n    }\n\nb-----原理：多背景渐变（缺点：圆角）\n\n.select_date{\n    background-image: linear-gradient(0deg,#ddd,#ddd 50%,transparent 50%);\n    background-size: 100% 1px;\n    background-repeat: no-repeat;\n    background-position: bottom;\n}\n</code></pre></li>\n<li><p>前缀</p>\n<p> a.安卓设备中应加上-webkit前缀，ios可以不加</p>\n</li>\n<li><p>img</p>\n<p> a.页面有img标签，用：display：inline-block;</p>\n<pre><code>     width:100%;(适应不同手机)\n------解决img边缘空白间隙1px\n</code></pre></li>\n</ul>\n","categories":["programming"],"tags":["programming"]},{"title":"移动端开发标准总结---1","url":"https://bobo-33.github.io/2017/06/07/移动端开发标准总结-1/","content":"<p>###Welcome to use MarkDown</p>\n<ul>\n<li><p>height固定</p>\n<ol>\n<li>fixed-top:48px</li>\n<li>fixed-bottom:49px</li>\n<li>列表型条性格用–line-height：50px</li>\n<li>列表型条性格间距用–min-height:12px</li>\n</ol>\n</li>\n<li><p>border</p>\n</li>\n</ul>\n<pre><code>    background-image: linear-gradient(180deg,#ddd,#ddd 50%,transparent 50%),linear-gradient(0deg,#ddd,#ddd 50%,transparent 50%);\n    background-size: 100% 1px,100% 1px;\n    background-repeat: no-repeat;\n    background-position: top,bottom;\n\n\n\n代替\n\n    border：1px solid #ccc;（区分几倍屏幕，当大于一倍是边框就会很粗）\n</code></pre><ul>\n<li><p>字体</p>\n<ol>\n<li>字体一般为16px</li>\n<li>字体图标用阿里字体库（显示的都是能用上的）</li>\n<li><p>文字可用—–</p>\n<ul>\n<li><p>字体</p>\n<pre><code>:before{content:&quot;￥&quot;}\n</code></pre></li>\n</ul>\n<hr>\n<ul>\n<li><p>属性</p>\n<pre><code>a.content:after {\n   content: attr(href);\n}\n\n&lt;a class=&quot;content&quot; href=&quot;http://www.zhangxinxu.com/&quot;&gt;此标签的href值是：&lt;/a&gt;\n</code></pre></li>\n</ul>\n<hr>\n<ul>\n<li><p>图片</p>\n<pre><code>p a[href $=&quot;.pdf&quot;]:after {\n    content:url(../image/icon_pdf.png);\n}\np a[rel = &quot;external&quot;]:after {\n    content:url(../image/icon_link.png);\n}\n\n&lt;p&gt;您可以查看此PDF文件：&lt;a href=&quot;/sample.pdf&quot;&gt;web站点的性能优化.pdf&lt;/a&gt;，或是在线查看，&lt;a href=&quot;http://www.zhangxinxu.com/wordpress/&quot; rel=&quot;external&quot;&gt;点击这里&lt;/a&gt;。&lt;/p&gt;\n</code></pre></li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p>宽度</p>\n<p>  width: calc(50% - 40px);——(width-(padding+border)*2-margin)——需要有空格</p>\n</li>\n</ul>\n","categories":["programming"],"tags":["programming"]},{"title":"hexo基本命令","url":"https://bobo-33.github.io/2017/06/07/hexo基本命令/","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n<p>###添加图片<br><img src=\"/2017/06/07/hexo基本命令/images/bg.jpg\" alt=\"\"></p>\n","categories":[],"tags":["other"]},{"title":"about","url":"https://bobo-33.github.io/about/index.html","content":"","categories":[],"tags":[]},{"title":"category","url":"https://bobo-33.github.io/category/index.html","content":"","categories":[],"tags":[]},{"title":"search","url":"https://bobo-33.github.io/search/index.html","content":"","categories":[],"tags":[]},{"title":"project","url":"https://bobo-33.github.io/project/index.html","content":"","categories":[],"tags":[]},{"title":"link","url":"https://bobo-33.github.io/link/index.html","content":"","categories":[],"tags":[]},{"title":"tag","url":"https://bobo-33.github.io/tag/index.html","content":"","categories":[],"tags":[]}]